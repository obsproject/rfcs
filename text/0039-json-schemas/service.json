{
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "$id": "https://obsproject.com/schemas/service.json",
    "title": "OBS Service Object Schema",
    "type": "object",
    "properties": {
        "more_info_link": {
            "type": "string",
            "description": "Link that provides additional info about the service, presented in the UI as a button next to the services dropdown.",
            "format": "uri",
            "$ref": "#/$defs/httpPattern",
            "minLength": 1
        },
        "stream_key_link": {
            "type": "string",
            "description": "Link where a logged-in user can find the 'stream key', presented as a button alongside the stream key field.",
            "format": "uri",
            "$ref": "#/$defs/httpPattern",
            "minLength": 1
        },
        "servers": {
            "type": "array",
            "description": "Array of server objects",
            "items": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the server (e.g. location, primary/backup), displayed in the Server dropdown.",
                        "minLength": 1
                    },
                    "protocol": {
                        "type": "string",
                        "title": "Server Protocol",
                        "description": "Protocol used by the server. Required if the URI scheme can't help identify the streaming protocol (e.g. HLS).",
                        "$ref": "protocolDefs.json#/$defs/protocolEnum"
                    },
                    "url": {
                        "type": "string",
                        "title": "Server URL",
                        "description": "URL of the ingest server.",
                        "format": "uri",
                        "$ref": "protocolDefs.json#/$defs/serverPattern",
                        "minLength": 1
                    }
                },
                "required": ["name","url","protocol"],
                "unevaluatedProperties": false
            },
            "minItems": 1,
            "uniqueItems": true,
            "additionalItems": false
        },
        "supported_codecs": {
            "type": "object",
            "title": "Supported Codecs",
            "description": "Codecs that are supported by the service.",
            "properties": {
                "video": {
                    "type": "object",
                    "title": "Supported Video Codecs",
                    "description": "Video codecs that are supported by the service.",
                    "propertyNames": { "$ref": "protocolDefs.json#/$defs/protocolMapEnum" },
                    "properties": {
                        "*": {
                            "type": "array",
                            "title": "Any Protocol Supported Video Codec",
                            "description": "Video codecs that are supported by the service and any supported protocol.",
                            "items": {
                                "type": "string",
                                "$ref": "codecDefs.json#/$defs/videoCodecEnum"
                            },
                            "minItems": 1,
                            "uniqueItems": true,
                            "additionalItems": false
                        }
                    },
                    "additionalProperties": {
                        "type": "array",
                        "title": "Protocol Supported Video Codec",
                        "description": "Video codecs that are supported by the service on this protocol.",
                        "items": {
                            "type": "string",
                            "$ref": "codecDefs.json#/$defs/videoCodecEnum"
                        },
                        "minItems": 1,
                        "uniqueItems": true,
                        "additionalItems": false
                    },
                    "minProperties": 1,
                    "unevaluatedProperties": false
                },
                "audio": {
                    "type": "object",
                    "title": "Supported Audio Codecs",
                    "description": "Audio codecs that are supported by the service.",
                    "propertyNames": { "$ref": "protocolDefs.json#/$defs/protocolMapEnum" },
                    "properties": {
                        "*": {
                            "type": "array",
                            "title": "Any Protocol Supported Audio Codec",
                            "description": "Audio codecs that are supported by the service and any supported protocol.",
                            "items": {
                                "type": "string",
                                "$ref": "codecDefs.json#/$defs/audioCodecEnum"
                            },
                            "minItems": 1,
                            "uniqueItems": true,
                            "additionalItems": false
                        }
                    },
                    "additionalProperties": {
                        "type": "array",
                        "title": "Protocol Supported Audio Codec",
                        "description": "Audio codecs that are supported by the service on this protocol.",
                        "items": {
                            "type": "string",
                            "$ref": "codecDefs.json#/$defs/audioCodecEnum"
                        },
                        "minItems": 1,
                        "uniqueItems": true,
                        "additionalItems": false
                    },
                    "minProperties": 1,
                    "unevaluatedProperties": false
                }
            },
            "minProperties": 1,
            "unevaluatedProperties": false
        },
        "supported_resolutions": {
            "type": "array",
            "title": "Supported Resolutions",
            "description": "Resolution supported by the service. All with or all withtout the framerate.",
            "items": {
                "type": "string",
                "pattern": "^[0-9]+x[0-9]+(|@[0-9]+)$"
            },
            "allOf": [
                {
                    "if": { "items": { "$ref": "#/$defs/resolutionFrameratePattern" } },
                    "then": { "items": { "$ref": "#/$defs/resolutionFrameratePattern" } }
                },
                {
                    "if": { "items": { "$ref": "#/$defs/resolutionPattern" } },
                    "then": { "items": { "$ref": "#/$defs/resolutionPattern" } }
                }
            ],
            "minItems": 1,
            "uniqueItems": true,
            "additionalItems": false
        },
        "maximums": {
            "type": "object",
            "title": "Maximums",
            "description": "Maximum values allowed by the service",
            "properties": {
                "framerate": {
                    "type": "integer",
                    "title": "Maximum Framerate",
                    "exclusiveMinimum": 0
                },
                "video_bitrate": {
                    "type": "object",
                    "title": "Maximum Video Bitrate",
                    "description": "Maximum video bitrate per codec",
                    "propertyNames": { "$ref": "codecDefs.json#/$defs/videoCodecEnum" },
                    "additionalProperties": { "type": "integer", "exclusiveMinimum": 0 },
                    "minProperties": 1,
                    "unevaluatedProperties":false
                },
                "audio_bitrate": {
                    "type": "object",
                    "title": "Maximum Audio Bitrate",
                    "description": "Maximum audio bitrate per codec",
                    "propertyNames": { "$ref": "codecDefs.json#/$defs/audioCodecEnum" },
                    "additionalProperties": { "type": "integer", "exclusiveMinimum": 0 },
                    "minProperties": 1,
                    "unevaluatedProperties":false
                },
                "video_bitrate_matrix": {
                    "type": "object",
                    "title": "Maximum Video Bitrate Matrix",
                    "description": "Maximum video bitrate per supported resolution with framerate and per codec",
                    "propertyNames": { "$ref": "#/$defs/resolutionFrameratePattern" },
                    "additionalProperties": {
                        "type": "object",
                        "propertyNames": { "$ref": "codecDefs.json#/$defs/videoCodecEnum" },
                        "additionalProperties": { "type": "integer", "exclusiveMinimum": 0 },
                        "minProperties": 1,
                        "unevaluatedProperties":false
                    },
                    "minProperties": 1,
                    "unevaluatedProperties": false
                }
            },
            "minProperties": 1,
            "unevaluatedProperties": false
        },
        "recommended": {
            "type": "object",
            "title": "Recommended settings",
            "description": "Settings that are applied only if the user wants to do so.",
            "allOf": [
                {
                    "$comment": "Add codec properties",
                    "$ref": "codecDefs.json#/$defs/codecProperties"
                }
            ],
            "minProperties": 1,
            "unevaluatedProperties": true
        }
    },
    "allOf": [
        {
            "$comment": "Make 'video_bitrate_matrix' unusable if 'supported_resolutions' is empty",
            "if": { "properties": { "supported_resolutions": { "maxItems": 0 } } },
            "then": { "properties": {
                "maximums": { "properties": { "video_bitrate_matrix": { "description": "This matrix is only available if supported resolutions with framerates are set", "maxProperties": 0 } } },
                "recommended": { "properties": { "video_bitrate_matrix": { "description": "This matrix is only available if supported resolutions with framerates are set", "maxProperties": 0 } } }
                } }
        },
        {
            "$comment": "Make 'video_bitrate_matrix' unusable if supported resolutions are without framerate",
            "if": { "not": { "properties": { "supported_resolutions": { "items": { "$ref": "#/$defs/resolutionFrameratePattern" } } } } },
            "then": { "properties": {
                "maximums": { "properties": { "video_bitrate_matrix": { "description": "This matrix is only available if 'supported_resolutions' is with framerates", "maxProperties": 0 } } },
                "recommended": { "properties": { "video_bitrate_matrix": { "description": "This matrix is only available if 'supported_resolutions' is with framerates", "maxProperties": 0 } } }
                } }
        },
        {
            "$comment": "Make 'framerate' unusable if supported resolutions are with framerate",
            "if": { "not": {"properties": { "supported_resolutions": { "items": { "$ref": "#/$defs/resolutionPattern" } } } } },
            "then": { "properties": {
                "maximums": { "properties": { "framerate": { "description": "This property is only available if 'supported_resolutions' is without framerates or not set", "const": 0 } } },
                "recommended": { "properties": { "framerate": { "description": "This property is only available if 'supported_resolutions' is without framerates or not set", "const": 0 } } }
                } }
        }
    ],
    "required": ["servers"],
    "$defs": {
        "httpPattern": {
            "$comment": "Pattern to enforce HTTP(S) links",
            "pattern": "^https?://"
        },
        "resolutionPattern": {
            "$comment": "Pattern for resolution without framerate",
            "pattern": "^[0-9]+x[0-9]+$"
        },
        "resolutionFrameratePattern": {
            "$comment": "Pattern for resolution with framerate",
            "pattern": "^[0-9]+x[0-9]+@[0-9]+$"
        }
    }
}
